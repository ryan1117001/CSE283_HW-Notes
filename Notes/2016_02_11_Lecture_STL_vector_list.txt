//Standand Template Library (STL)

#include <iostream>
#include <vector> //vector, list, map are containers in C++ STL
#include <list>
#include <map>
#include <string>
using namespace std;

class course {
public:
	string name;
	int section;
	int credits;
	//course *next;
	course(){}
	course(string n, int s, int c) { name = n; section = s; credits = c; }
};


int main() {
	int a[100];
	cout << a[105];
	int k = 10;
	//int b[k]; Error!
	vector<int> v1(10);//vector  of size 10
	vector<int> v2(15, 0); //vector of size 15, with 0 as initial value for all
	vector<int> v3 = { 1,2, 3,4,5 }; //size 5 and initial values are 1,2,3,4,5
	vector<int> v4;//empty vector
	v3[3] = 300;
	cout << v3[2] << v3.size() << endl;
	v3.pop_back(); //delete last number
	v3.push_back(100); //add a new number 100 to the end of the vector
	v3.push_back(200);

	vector<int>::iterator it1 = v3.begin(), it2 = v3.end();
	//beign is the position of the first vector element
	//end is the position right after the last vector element
	for (size_t i = 0; i < v3.size(); i++)  cout << v3[i] << " ";
	//size_t : non-negative integer
	while (it1 != v3.end()) {
		cout << *it1;
		it1++;
	}

	list<int> L1 = { 1,2, 3 };
	L1.push_back(4);
	L1.pop_back();
	L1.push_front(100);
	L1.pop_front();
	list<int>::iterator it3 = L1.begin();
	while (it3 != L1.end()) {
		cout << *it3;
		it3++;
	}
	/*
	For vector, iterator values can be modified arbitrarily.
	it = it+10;
	For list; only it++, it--, ++it, --it;
	it = it +1; Error
	*/
	course c1("CSE283", 1, 3), c2("MAT295", 7, 4), c3("WRT105", 5, 3);
	list<course> L2;
	L2.push_front(c1);
	L2.push_back(c2);
	L2.push_front(c3);
	list<course>::iterator it4 = find(L2.begin(), L2.end(), c2);
	L2.erase(it4);
	L2.remove(c1);//Only list supports remove
	//this is a remove_all

	vector<int>::iterator it5 = find(v3.begin(), v3.end(), 100);
	v3.erase(it5);



	getchar();
	getchar();
	return 0;

}
