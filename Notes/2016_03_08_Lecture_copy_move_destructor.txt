#include <iostream>

class big_data {
public:
	int size;
	int * big_array;
	big_data() { size = 0; big_array = nullptr; } //(regular constructor)
	big_data(int i) { // regular constructor
		size = i;
		big_array = new int[size];
		for (int j = 0; j < size; j++) big_array[j] = 0;
	}
	//copy constructor -- left ref copy constructor

	big_data(const big_data & t) { //deep copying

		size = t.size;
		big_array = new int[size];
		for (int i = 0; i < size; i++) big_array[i] = t.big_array[i];


	}
	//move constructor -- right ref copy constructor
	big_data(big_data &&t) {

		size = t.size;
		big_array = t.big_array;
		t.big_array = nullptr;

	}

	//destructor -- to remove all dynamically created structures 
	~big_data() {
		delete[] big_array;

	}
	 
	//left ref operator = (assignment)
	big_data operator=(big_data &t) {


	}
	//right ref operator = (asssignment)
	big_data operator=(big_data &&t) {


	}
	
	big_data three_times() {
		big_data temp(size);
		for (int i = 0; i < size; i++) temp.big_array[i] = 3 * big_array[i];
		return temp; //move constructor
	}


};

int main() {

	big_data t1(10000), t2;
	for (int i = 0; i < t1.size; i++) { t1.big_array[i] = i;}

	t2 = t1.three_times();
	getchar();
	getchar();
	return 0;
}