//more on thread
#include <iostream>
#include <thread>
#include <mutex> //mutually exclusive

using namespace std;
mutex lock1;
unique_lock<mutex>  u_lock1(lock1);	
void cube(int A[], int a, int b) {

	for (int i = a; i <= b; i++) {
		A[i] = A[i] * A[i] * A[i];
	}
	u_lock1.lock(); //with lock, each thread will completely finish all its array elements without
	//being interupted.
	for (int i = a; i <= b; i++) 
		cout << A[i] << " ";
	//u_lock1.unlock();  a unique_lock will unlock itself when the program is leaving a scope
}

int main() {

	thread T[10];
	int A[100000];
	for (int i = 0; i < 100000; i++) A[i] = i * 5;
	for (int i = 0; i < 10; i++) {
		T[i] = thread(cube, A, 10000 * i, 10000 * i + 9999);
	}
	for (int i = 0; i < 10; i++) T[i].join();

	//for (int i = 0; i < 100000; i++) cout << " " << A[i];

	getchar();
	getchar();
	return 0;

}
